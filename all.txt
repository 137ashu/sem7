Huffman Encoding
/*
 * Problem Statement :- Write a program to implement Huffman Encoding using a greedy
 * 						strategy.
 *
 * Time Complexity  : O(nlogn)   (n => number of unique characters in string)
 * Space Complexity : O(n)
 */


#include<bits/stdc++.h>
using namespace std;

class Node
{
	private:
		char data;
		int freq;
		Node *lchild, *rchild;
	public:
		Node(char d, int f=-1)
		{
			data = d;
			freq = f;
			lchild = rchild = NULL;
		}
		Node(Node *lc, Node *rc)
		{
			data = 0;
			freq = lc->freq + rc->freq;
			lchild = lc;
			rchild = rc;
		}
		void traverse(string code="") const
	    {
			if(lchild != NULL)
			{
				lchild->traverse(code+'0');
				rchild->traverse(code+'1');
			}
			else
			{
				cout<<"\n\t"<<setw(10)<<data<<setw(10)<<freq<<setw(15)<<code<<endl;
			}
	    }
		bool operator<(const Node &a) const
		
			return freq > a.freq;
		}
};

void huffman_encoding(string str)
{
	priority_queue<Node> pq;
	vector<int> frequency(256, 0);

	for(unsigned int i=0; i<str.size(); i++)
	{
		frequency[str[i]]++;
	}
	for(int i=0; i<256; i++)
	{
		if(frequency[i] > 0)
		{
			pq.push(Node(i, frequency[i]));
		}
	}
	while(pq.size() >1)
	{
		Node *lc = new Node(pq.top());
		pq.pop();
		Node *rc = new Node(pq.top());
		pq.pop();
		pq.push(Node(lc, rc));
	}
	cout<<"\n\t The Huffman Code "<<endl;
	cout<<"\n\t"<<setw(10)<<"Data\t"<<setw(10)<<"Frequency"<<setw(15)<<"Huffman Code"<<endl;
	pq.top().traverse();
}

int main()
{
	string str;

	cout<<"\n\t Enter String to find Huffman Codes : ";
	cin>>str;

	huffman_encoding(str);
}

###################################################################################################################

Quicksort

/*
 * Problem Statement :- Write a program for analysis of quick sort by using deterministic
 * 						and randomized variant.
 */

#include<bits/stdc++.h>
using namespace std;

//Deterministic Quick-sort
// Pivot => last element in the array

int partition(vector<int> &a, int l, int h)
{
	int index = l;
	int pivot = h;
	for(int i=l; i<h; i++)
	{
		if(a[i] < a[pivot])
		{
			swap(a[i], a[index]);
			index++;
		}
	}
	swap(a[pivot], a[index]);
	return index;
}

int r_partition(vector<int> &a, int l, int h)
{
	int num = rand();
	int ri = l + num%(h-l+1);
	swap(a[h], a[ri]);
	return partition(a, l, h);
}

void quickSort(vector<int> &a, int low, int high)
{
	if(low >= high) return;

	int pi = partition(a, low, high);
	quickSort(a, low, pi-1);
	quickSort(a, pi+1, high);
}

void r_quickSort(vector<int> &a, int low, int high)
{
	if(low >= high) return;

	int pi = r_partition(a, low, high);
	r_quickSort(a, low, pi-1);
	r_quickSort(a, pi+1, high);
}

int main()
{
	int choice, n;
	while(true)
	{
		cout<<"\n\n Main-Menu \n\t 1. Deterministic Quick-Sort \n\t 2. Randomized Quick-Sort \n\t 3. Exit "<<endl;
		cout<<"\n\t Enter choice: ";
		cin>>choice;

		if(choice == 1)
		{
			cout<<"\n\t Enter the number of data element to be sorted: ";
			cin>>n;
			vector<int> a(n);

			cout<<"\n\t Enter the array: ";
			for(int i=0; i<n; i++) cin>>a[i];

			quickSort(a, 0, n-1);

			cout<<"\n\t Sorted Data: ";
			for (int i=0; i<n; i++) cout<<a[i]<<" ";
		}
		else if(choice == 2)
		{
			cout<<"\n\t Enter the number of data element to be sorted: ";
			cin>>n;
			vector<int> a(n);

			cout<<"\n\t Enter the array: ";
			for(int i=0; i<n; i++) cin>>a[i];

			quickSort(a, 0, n-1);

			cout<<"\n\t Sorted Data: ";
			for (int i=0; i<n; i++) cout<<a[i]<<" ";
		}
		else if(choice == 3)
		{
			cout<<"\n\t Thank you!!!";
			exit(0);
		}
		else
		{
			cout<<"\n\t Enter valid choice"<<endl;
		}
	}
}

###############################################################################################

Knapsack
/*
 * Problem Statement :- Write a program to solve a 0-1 Knapsack problem using dynamic
 * 						programming or branch and bound strategy.
 *
 * Time complexity  : O(n*c)      (n=>number of elements  c=>capacity of knapsack)
 * Space Complexity : O(n*c)
 */

#include<bits/stdc++.h>
using namespace std;

int knapsack(vector<int> val, vector<int> wt, int c)
{
	int n = wt.size();

	vector<vector<int>> dp(n+1, vector<int>(c+1, 0));
    for(int i=1; i<=n; i++)
    {
        for(int j=1; j<=c; j++)
        {
            dp[i][j] = dp[i-1][j];
            if(wt[i-1] <= j) dp[i][j] = max(dp[i][j], val[i-1]+dp[i-1][j-wt[i-1]]);
        }
    }
    return dp[n][c];
}

int main()
{
	int n, c;

	cout<<"\n\t Enter number of elements : ";
	cin>>n;
    cout<<"\n\t Enter the capacity of knapsack : ";
    cin>>c;

    vector<int> wt(n, 0), val(n, 0);

    cout<<"\n\t Enter the value/cost of all elements : ";
    for(int i=0; i<n; i++) cin>>val[i];

    cout<<"\n\t Enter the weight of all elements : ";
    for(int i=0; i<n; i++) cin>>wt[i];

    int max_val = knapsack(val, wt, c);
    cout<<"\n\t Maximum total value in the knapsack : "<<max_val<<endl;
}

###########################################################################################

Nqueens-placed
# /*
#  * Problem Statement :- Design n-Queens matrix having first Queen placed. Use backtracking
#  * 						to place remaining Queens to generate the final n-queen's matrix.
#  *
#  * Time Complexity  : O(n!)
#  * Space Complexity : O(n)
#  */

N = int(input("Enter the number of queens to be placed "))
print("Enter the position where you want to place the first queen ")
x = int(input("Enter column number [1,N] "))


def printSolution(board):
    for i in range(N):
        for j in range(N):
            print(board[i][j], end=" ")
        print()


def isSafe(board, row, col):

    # Check this row on left side
    for i in range(col):
        if board[row][i] == 1:
            return False

    # Check upper diagonal on left side
    for i, j in zip(range(row, -1, -1),
                    range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    # Check lower diagonal on left side
    for i, j in zip(range(row, N, 1),
                    range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    return True


def solveNQUtil(board, col):

    # base case: If all queens are placed
    # then return true
    if col >= N:
        return True

    # Consider this column and try placing
    # this queen in all rows one by one
    for i in range(N):

        if isSafe(board, i, col):

            board[i][col] = 1

            if solveNQUtil(board, col + 1) == True:
                return True

            board[i][col] = 0

    return False


def menu():

    board = []
    for i in range(N):
        l = []
        for j in range(N):
            l.append(0)
        board.append(l)

    # board[0][x-1] = 1 #placing the first queen

    # printSolution(board)

    if (solveNQUtil(board, x-1) == False):
        # if we are unable to place any queen successfully in first column, we return false.
        print("Solution not exist")
        return False

    else:
        printSolution(board)
        return True
    # return false


menu()

#####################################################################################################

Fibonacci
/*
 * Problem Statement :- Write a program non-recursive and recursive program to calculate
 *                      Fibonacci numbers and analyze their time and space complexity.
 *
 * Recursive
 * Time Complexity  : O(2^n)
 * Space Complexity : O(n)
 *
 * Non-Recursive
 * Time Complexity  : O(n)
 * Space Complexity : O(1)
 */

#include<bits/stdc++.h>
using namespace std;

int recursive_fibonacci(int n)
{
	if(n==1 || n==0) return n;
	return recursive_fibonacci(n-1) + recursive_fibonacci(n-2);
}

int non_recursive_fibonacci(int n)
{
	if(n==1 || n==0) return n;
	int a=0, b=1, c;

	for(int i=2; i<=n; i++)
	{
		c = a+b;
		a = b;
		b = c;
	}
	return c;
}

int main()
{
	int n, choice;

	while(true)
	{
		cout<<"\n\n Main-Menu \n\t 1. Recursive \n\t 2. Non-Recursive \n\t 3. Exit \n"<<endl;
		cout<<"\n\t Enter choice: ";
		cin>>choice;

		if(choice == 1)
		{
			cout<<"\n\t Enter value of n to find nth fibonacci number(Fn) : ";
			cin>>n;
			int Fn = recursive_fibonacci(n);
			cout<<"\n\t Value of F"<<n<<" = "<<Fn<<endl;
		}
		else if(choice == 2)
		{
			cout<<"\n\t Enter value of n to find nth fibonacci number(Fn) : ";
			cin>>n;
			int Fn = non_recursive_fibonacci(n);
			cout<<"\n\t Value of F"<<n<<" = "<<Fn<<endl;
		}
		else if(choice == 3)
		{
			cout<<"\n\t Thank You!!"<<endl;
			exit(0);
		}
		else
		{
			cout<<"\n\t Enter valid choice"<<endl;
		}
	}

}

####################################################################################################

bank
pragma solidity >=0.7.1;
// SPDX-License-Identifier: UNLICENSED
 
contract Bank {
    uint balance;
 
    // event Deposit(uint val);
    // event Withdraw(uint val);
 
    function deposit(uint amt) public returns(uint) {
        balance += amt;
        return 1;
    }
    function withdraw(uint amt) public returns(uint) {
        if(amt > balance) {
            return 0;
        }
        balance -= amt;
        return 1;
    }
    function showBalance() view public returns(uint) {
        return balance;
    } 
}

##############################################################################

student


pragma solidity >=0.7.1;
// SPDX-License-Identifier: UNLICENSED
 
contract StudentInfo {
    struct Student {
        string id;
        string name;
        string contactNo;
    }
    Student[20] studInfoArray;
    uint i=0;
    function registerStudent(string memory _stud_id, string memory _name, string memory _contact) public returns(string memory) {
        Student memory student = Student(_stud_id, _name, _contact);
 
        if(i > 20) {
            return "Memory limit exhausted";
        }
        else {
            studInfoArray[i] = student;
            i += 1;
            return "Student registered successfully!";
        }        
    }
 
    function getStudent(uint idx) public view returns(string memory){
        Student memory student = studInfoArray[idx];
        return string(bytes.concat("Name: ", bytes(student.name), ", Contact No.: ", bytes(student.contactNo), ", Seat No: ", bytes(student.id)));
    }
    // The solidity fallback function is executed if none of the other functions match the function identifier
    // or no data was provided with the function call. Only one unnamed function can be assigned to a contract
 
    fallback(bytes calldata) external payable returns (bytes memory){
        return "Fallback function called";
    }
    receive() external payable{
    }
}
